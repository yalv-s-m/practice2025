/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import jooqdata.Keys;
import jooqdata.Purchase;
import jooqdata.tables.Customer.CustomerPath;
import jooqdata.tables.Lot.LotPath;
import jooqdata.tables.records.CustomerRecord;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Customer extends TableImpl<CustomerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>purchase.customer</code>
     */
    public static final Customer CUSTOMER = new Customer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerRecord> getRecordType() {
        return CustomerRecord.class;
    }

    /**
     * The column <code>purchase.customer.customer_code</code>.
     */
    public final TableField<CustomerRecord, String> CUSTOMER_CODE = createField(DSL.name("customer_code"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>purchase.customer.customer_name</code>.
     */
    public final TableField<CustomerRecord, String> CUSTOMER_NAME = createField(DSL.name("customer_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>purchase.customer.customer_inn</code>.
     */
    public final TableField<CustomerRecord, String> CUSTOMER_INN = createField(DSL.name("customer_inn"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>purchase.customer.customer_kpp</code>.
     */
    public final TableField<CustomerRecord, String> CUSTOMER_KPP = createField(DSL.name("customer_kpp"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>purchase.customer.customer_legal_address</code>.
     */
    public final TableField<CustomerRecord, String> CUSTOMER_LEGAL_ADDRESS = createField(DSL.name("customer_legal_address"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>purchase.customer.customer_postal_address</code>.
     */
    public final TableField<CustomerRecord, String> CUSTOMER_POSTAL_ADDRESS = createField(DSL.name("customer_postal_address"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>purchase.customer.customer_email</code>.
     */
    public final TableField<CustomerRecord, String> CUSTOMER_EMAIL = createField(DSL.name("customer_email"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>purchase.customer.customer_code_main</code>.
     */
    public final TableField<CustomerRecord, String> CUSTOMER_CODE_MAIN = createField(DSL.name("customer_code_main"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>purchase.customer.is_organization</code>.
     */
    public final TableField<CustomerRecord, Boolean> IS_ORGANIZATION = createField(DSL.name("is_organization"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>purchase.customer.is_person</code>.
     */
    public final TableField<CustomerRecord, Boolean> IS_PERSON = createField(DSL.name("is_person"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Customer(Name alias, Table<CustomerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>purchase.customer</code> table reference
     */
    public Customer(String alias) {
        this(DSL.name(alias), CUSTOMER);
    }

    /**
     * Create an aliased <code>purchase.customer</code> table reference
     */
    public Customer(Name alias) {
        this(alias, CUSTOMER);
    }

    /**
     * Create a <code>purchase.customer</code> table reference
     */
    public Customer() {
        this(DSL.name("customer"), null);
    }

    public <O extends Record> Customer(Table<O> path, ForeignKey<O, CustomerRecord> childPath, InverseForeignKey<O, CustomerRecord> parentPath) {
        super(path, childPath, parentPath, CUSTOMER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CustomerPath extends Customer implements Path<CustomerRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CustomerPath(Table<O> path, ForeignKey<O, CustomerRecord> childPath, InverseForeignKey<O, CustomerRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CustomerPath(Name alias, Table<CustomerRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CustomerPath as(String alias) {
            return new CustomerPath(DSL.name(alias), this);
        }

        @Override
        public CustomerPath as(Name alias) {
            return new CustomerPath(alias, this);
        }

        @Override
        public CustomerPath as(Table<?> alias) {
            return new CustomerPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Purchase.PURCHASE;
    }

    @Override
    public UniqueKey<CustomerRecord> getPrimaryKey() {
        return Keys.CUSTOMER_PK;
    }

    @Override
    public List<ForeignKey<CustomerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CUSTOMER__FK_CUSTOMER_MAIN);
    }

    private transient CustomerPath _customer;

    /**
     * Get the implicit join path to the <code>purchase.customer</code> table.
     */
    public CustomerPath customer() {
        if (_customer == null)
            _customer = new CustomerPath(this, Keys.CUSTOMER__FK_CUSTOMER_MAIN, null);

        return _customer;
    }

    private transient LotPath _lot;

    /**
     * Get the implicit to-many join path to the <code>purchase.lot</code> table
     */
    public LotPath lot() {
        if (_lot == null)
            _lot = new LotPath(this, null, Keys.LOT__LOT_CUSTOMER_FK.getInverseKey());

        return _lot;
    }

    @Override
    public List<Check<CustomerRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("chk_customer_role"), "((((is_organization = true) AND (is_person = false)) OR ((is_organization = false) AND (is_person = true))))", true)
        );
    }

    @Override
    public Customer as(String alias) {
        return new Customer(DSL.name(alias), this);
    }

    @Override
    public Customer as(Name alias) {
        return new Customer(alias, this);
    }

    @Override
    public Customer as(Table<?> alias) {
        return new Customer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(String name) {
        return new Customer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(Name name) {
        return new Customer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(Table<?> name) {
        return new Customer(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Condition condition) {
        return new Customer(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, String, String, String, Boolean, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
